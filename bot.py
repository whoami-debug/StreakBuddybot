import asyncio
import logging
import json
from datetime import datetime, timezone, date
from typing import Optional, Dict, List, Set, Tuple
from pathlib import Path
from collections import defaultdict

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandObject, CommandStart
from aiogram.enums import ChatType
from aiogram.types import Message, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from aiohttp import web
import aiosqlite
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

from database import Database
from config import BOT_TOKEN, WEBAPP_URL

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
# dp = Dispatcher() # –£–±–µ—Ä–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é dp –∑–¥–µ—Å—å, —Å–¥–µ–ª–∞–µ–º –≤ main
db = Database()

# –ü—É—Ç—å –∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
WEBAPP_PATH = Path(__file__).parent / "webapp"

# –°–æ–∑–¥–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
routes = web.RouteTableDef()

# –ö–µ—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö
# {chat_id: {user_id}} - –∫—Ç–æ –ø–∏—Å–∞–ª —Å–µ–≥–æ–¥–Ω—è
group_activity_today: Dict[int, Set[int]] = defaultdict(set)
# {chat_id: {(user1_id, user2_id)}} - –∫–∞–∫–∏–º –ø–∞—Ä–∞–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç—Ä–∏–∫–µ —Å–µ–≥–æ–¥–Ω—è
notified_streaks_today: Dict[int, Set[Tuple[int, int]]] = defaultdict(set)

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã, —á—Ç–æ–±—ã —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –∫–µ—à —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
current_bot_date: Optional[date] = None

async def reset_daily_caches_if_new_day():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–µ—à–∏, –µ—Å–ª–∏ –Ω–∞—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å."""
    global current_bot_date, group_activity_today, notified_streaks_today
    today = datetime.now(timezone.utc).date()
    if current_bot_date != today:
        logger.info(f"–ù–æ–≤—ã–π –¥–µ–Ω—å ({today})! –°–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–µ—à–∏.")
        group_activity_today.clear()
        notified_streaks_today.clear()
        current_bot_date = today

@routes.get('/')
async def serve_webapp(request):
    return web.FileResponse(WEBAPP_PATH / 'index.html')

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
# –§–æ—Ä–º–∞—Ç: {user_id: {partner_username: partner_id}}
dm_partners: Dict[int, Dict[str, int]] = {}

def get_days_word(days: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ '–¥–µ–Ω—å'"""
    if days % 100 in [11, 12, 13, 14]:
        return "–¥–Ω–µ–π"
    if days % 10 == 1:
        return "–¥–µ–Ω—å"
    if days % 10 in [2, 3, 4]:
        return "–¥–Ω—è"
    return "–¥–Ω–µ–π"

async def setup_bot_commands():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –¥–ª—è –º–µ–Ω—é"""
    commands = [
        BotCommand(
            command="start",
            description="üöÄ –ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –¥—Ä—É–∑—å—è–º–∏"
        ),
        BotCommand(
            command="webapp",
            description="üì± –û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∏–ª—å–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
        ),
        BotCommand(
            command="streaks",
            description="üî• –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ —Å–µ—Ä–∏–∏ –æ–±—â–µ–Ω–∏—è"
        ),
        BotCommand(
            command="reset",
            description="üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç—Ä–∏–∫: /reset @username"
        ),
        BotCommand(
            command="help",
            description="üí° –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
        )
    ]
    await bot.set_my_commands(commands)

# –£–ë–ò–†–ê–ï–ú –î–ï–ö–û–†–ê–¢–û–†–´, –¢–ê–ö –ö–ê–ö –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –í MAIN
async def cmd_start(message: Message, command: Optional[CommandObject] = None): # –î–æ–±–∞–≤–∏–ª CommandObject –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏, —Ö–æ—Ç—è CommandStart –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç –µ–≥–æ
    await reset_daily_caches_if_new_day()
    await db.add_user(
        user_id=message.from_user.id,
        username=message.from_user.username or str(message.from_user.id)
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    webapp_button = InlineKeyboardButton(
        text="üì± –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
        web_app=WebAppInfo(url=WEBAPP_URL)
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[webapp_button]])
    
    if message.chat.type == ChatType.PRIVATE:
        await message.answer(
            "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Streak Buddy!\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –æ–±—â–µ–Ω–∏—è —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –±–ª–∏–∑–∫–∏–º–∏. "
            "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –æ–±—â–µ–Ω–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤–∞—à—É —Å–µ—Ä–∏—é (—Å—Ç—Ä–∏–∫), –∞ –ø—Ä–æ–ø—É—Å–∫ –¥–Ω—è —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –µ—ë.\n\n"
            "üì± <b>–ß—Ç–æ –Ω–æ–≤–æ–≥–æ:</b>\n"
            "‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n"
            "‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–∞—Ö\n"
            "‚Ä¢ –ö—Ä–∞—Å–∏–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—â–µ–Ω–∏—è\n\n"
            "üéØ <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>\n"
            "1. –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∞ —á–µ—Ä–µ–∑ /chat @username\n"
            "2. –û–±—â–∞–π—Ç–µ—Å—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
            "3. –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–æ–∏–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "‚ú® <b>Streak Buddy –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ!</b>\n\n"
            "ü§ù <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
            "‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            "‚Ä¢ –°—Ç—Ä–∏–∫ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –¥–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞ –ø–∏—à—É—Ç –≤ –æ–¥–∏–Ω –¥–µ–Ω—å\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /streaks —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ —Å–µ—Ä–∏–∏ –æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ –ü—Ä–æ–ø—É—Å–∫ –¥–Ω—è —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä–∏–∫\n\n"
            "üí´ –û–±—â–∞–π—Ç–µ—Å—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ –∏ –ø–æ–±–µ–π—Ç–µ —Ä–µ–∫–æ—Ä–¥ –≥—Ä—É–ø–ø—ã!",
            parse_mode="HTML"
        )

async def cmd_webapp(message: Message, command: Optional[CommandObject] = None):
    await reset_daily_caches_if_new_day()
    if message.chat.type != ChatType.PRIVATE:
        await message.answer("‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.")
        return
    
    webapp_button = InlineKeyboardButton(
        text="üì± –û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
        web_app=WebAppInfo(url=WEBAPP_URL)
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[webapp_button]])
    
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—â–µ–Ω–∏—è:",
        reply_markup=keyboard
    )

async def cmd_chat(message: Message, command: CommandObject):
    await reset_daily_caches_if_new_day()
    if message.chat.type != ChatType.PRIVATE:
        await message.answer(
            "‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º."
        )
        return

    if not command.args:
        await message.answer(
            "‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
            "–ü—Ä–∏–º–µ—Ä: /chat @username"
        )
        return

    user_id = message.from_user.id
    target_username = command.args.strip('@')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º —Å–µ–±—è
    if message.from_user.username and target_username == message.from_user.username:
        await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–∏ —Å–µ–±—è.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_id = await db.get_user_id_by_username(target_username)
    if not target_id:
        await message.answer(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ—Ç–∞.\n"
            "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç—Ä–∏–∫
    existing_request = await db.get_streak_request(user_id, target_id)
    if existing_request:
        await message.answer(
            f"‚úã –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç—Ä–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{target_username}.\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!"
        )
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç—Ä–∏–∫
    await db.add_streak_request(user_id, target_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    accept_button = InlineKeyboardButton(
        text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
        callback_data=f"accept_streak:{user_id}"
    )
    decline_button = InlineKeyboardButton(
        text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
        callback_data=f"decline_streak:{user_id}"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[accept_button, decline_button]])
    
    await bot.send_message(
        target_id,
        f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} —Ö–æ—á–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –≤–∞–º–∏!\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å:",
        reply_markup=keyboard
    )
    
    await message.answer(
        f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{target_username}.\n"
        "–Ø —Å–æ–æ–±—â—É, –∫–æ–≥–¥–∞ –æ–Ω –ø—Ä–∏–º–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç –∑–∞–ø—Ä–æ—Å!"
    )

async def process_streak_request(callback_query: types.CallbackQuery):
    await reset_daily_caches_if_new_day()
    action, user_id_str = callback_query.data.split(":")
    from_user_id = int(user_id_str)
    to_user_id = callback_query.from_user.id
    
    if action == "accept_streak":
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥—Ä—É–≥ –¥—Ä—É–≥—É
        await db.add_streak_pair(from_user_id, to_user_id)
        
        from_user_chat = await bot.get_chat(from_user_id)
        to_user_username = callback_query.from_user.username or str(to_user_id)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await bot.send_message(
            from_user_id,
            f"üéâ @{to_user_username} –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–±—â–µ–Ω–∏—è!\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å."
        )
        
        await callback_query.message.edit_text(
            "‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–±—â–µ–Ω–∏—è.\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å @{from_user_chat.username or str(from_user_id)}"
        )
        
    else:  # decline_streak
        to_user_username = callback_query.from_user.username or str(to_user_id)
        await bot.send_message(
            from_user_id,
            f"üòî @{to_user_username} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–±—â–µ–Ω–∏—è."
        )
        
        await callback_query.message.edit_text(
            "‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–±—â–µ–Ω–∏—è."
        )
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    await db.remove_streak_request(from_user_id, to_user_id)

async def send_streaks_data(user_id: int, is_webapp_request: bool = False):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç—Ä–∏–∫–∞—Ö –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    if not is_webapp_request:
        return
        
    streaks = await db.get_user_streaks(user_id, user_id) 
    streak_data = []
    for username, count in streaks:
        partner_id = await db.get_user_id_by_username(username)
        if partner_id:
            last_chat = await db.get_last_chat_date(user_id, partner_id)
            today = datetime.now(timezone.utc).date()
            
            if last_chat:
                days_diff = (today - last_chat).days
                last_chat_text = (
                    "–°–µ–≥–æ–¥–Ω—è" if days_diff == 0 and count > 0 else # –î–æ–±–∞–≤–∏–ª count > 0, —á—Ç–æ–±—ã "–°–µ–≥–æ–¥–Ω—è" –±—ã–ª–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö
                    "–í—á–µ—Ä–∞" if days_diff == 1 and count > 0 else
                    last_chat.strftime("%d.%m.%Y") if count > 0 else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç—Ä–∏–∫–∞"
                )
            else:
                last_chat_text = "–ù–µ—Ç –æ–±—â–µ–Ω–∏—è"
            
            streak_data.append({
                'username': username,
                'partner_id': partner_id, # –î–æ–±–∞–≤–ª—è–µ–º partner_id –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ WebApp
                'count': count,
                'last_chat': last_chat_text
            })
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É
    # (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–ª—É—à–∞–µ—Ç —ç—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –±–æ—Ç –∫–∞–∫-—Ç–æ –∏—Ö –ø–µ—Ä–µ–¥–∞–µ—Ç)
    # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ Telegram WebApp API (window.Telegram.WebApp.sendData)
    # –∏–ª–∏ —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π –º–µ—Ö–∞–Ω–∏–∑–º, –µ—Å–ª–∏ –±–æ—Ç –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –º–æ–≥—É—Ç –æ–±—â–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é.
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–∞–∫ –±—ã–ª–æ.
    # –í —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏, –¥–∞–Ω–Ω—ã–µ –ª—É—á—à–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é –≤ WebApp.
    
    # –í–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –º—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ WebApp.
    # –≠—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤—ã–∑–æ–≤–æ–º –º–µ—Ç–æ–¥–∞ JavaScript –≤ WebApp, –µ—Å–ª–∏ WebApp –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ.
    # –ï—Å–ª–∏ —ç—Ç–æ –ø—É—à –æ—Ç –±–æ—Ç–∞, —Ç–æ —ç—Ç–æ —Å–ª–æ–∂–Ω–µ–µ. 
    # –ü–æ–∫–∞ —á—Ç–æ, –∫–æ–≥–¥–∞ WebApp –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç 'get_streaks', –º—ã –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –µ–º—É –¥–∞–Ω–Ω—ã–º–∏.
    # –ê –∫–æ–≥–¥–∞ 'mark_today', –º—ã –æ—Ç–≤–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ —Å—Ç–∞—Ç—É—Å–µ.
    
    # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ get_streaks, —Ç–æ WebApp –æ–∂–∏–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ.
    # –ú—ã –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –∫–∞–∫ JSON —Å—Ç—Ä–æ–∫—É –≤ web_app_data –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ—Ç WebApp.
    # –û–¥–Ω–∞–∫–æ, —Ñ—É–Ω–∫—Ü–∏—è send_message –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ web_app_data.
    # –ü–æ—ç—Ç–æ–º—É, –µ—Å–ª–∏ —ç—Ç–æ is_webapp_request –æ—Ç action 'get_streaks', 
    # —Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ handle_webapp_data.
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è send_streaks_data –º–æ–∂–µ—Ç –±—ã—Ç—å —É–ø—Ä–æ—â–µ–Ω–∞ –¥–æ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    # –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ handle_webapp_data.
    
    # –î–ª—è –¥–µ–π—Å—Ç–≤–∏—è 'mark_today', –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –º—ã –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
    if is_webapp_request: # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª –∑–∞–ø—Ä–æ—Å –æ—Ç webapp
        # logger.info(f"WebApp: Preparing to send updated streak data to user {user_id}: {streak_data}")
        # –≠—Ç–æ –≤—Å–µ –µ—â–µ –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ, —Ç.–∫. –º—ã —à–ª–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç, –∞ –Ω–µ –Ω–∞–ø—Ä—è–º—É—é –≤ WebApp.
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± - WebApp –¥–æ–ª–∂–µ–Ω —Å–∞–º –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è.
        pass # –ù–µ –±—É–¥–µ–º —Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –ø—É—Å—Ç—å handle_webapp_data —Ä–µ—à–∞–µ—Ç

async def handle_webapp_data(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    await reset_daily_caches_if_new_day()
    try:
        data = json.loads(message.web_app_data.data)
        action = data.get('action')
        user_id = message.from_user.id
        
        if action == 'mark_today':
            partner_id_to_mark = data.get('partner_id')
            if not partner_id_to_mark:
                await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏.")
                return

            today = datetime.now(timezone.utc).date()
            status_msg, streak_updated = await db.mark_webapp_interaction(user_id, int(partner_id_to_mark), today)
            
            await message.answer(status_msg) # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç

            # –ï—Å–ª–∏ —Å—Ç—Ä–∏–∫ –æ–±–Ω–æ–≤–∏–ª—Å—è –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏, –ø–æ–ø—Ä–æ—Å–∏–º WebApp –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            # –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–ª–æ–∂–∏–≤—à–∏—Å—å, 
            # —á—Ç–æ WebApp —Å–∞–º –∑–∞–ø—Ä–æ—Å–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è.
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, WebApp –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—Ç —Å–∞–º —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å get_streaks –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ.
            # –õ–∏–±–æ, –µ—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º –ø—É—à–∏—Ç—å, —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –¥—Ä—É–≥–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.
            # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º —Ç–∞–∫: WebApp –ø–æ—Å–ª–µ mark_today –º–æ–∂–µ—Ç —Å–∞–º –∑–∞–ø—Ä–æ—Å–∏—Ç—å get_streaks.
            if streak_updated: # –ï—Å–ª–∏ —Å—Ç—Ä–∏–∫ —Ä–µ–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–ª—Å—è, –º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å
                logger.info(f"WebApp: Streak updated for {user_id} with {partner_id_to_mark} via webapp mark.")
                # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É WebApp –æ–±–Ω–æ–≤–∏—Ç—å—Å—è, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–æ–π –º–µ—Ö–∞–Ω–∏–∑–º
                # –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º payload,
                # –∫–æ—Ç–æ—Ä—ã–π WebApp –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç. –ù–æ —ç—Ç–æ —É—Å–ª–æ–∂–Ω–µ–Ω–∏–µ.

        elif action == 'get_streaks':
            streaks = await db.get_user_streaks(user_id, user_id) # user_id –∫–∞–∫ chat_id –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∏–∫–æ–≤
            streak_data_for_webapp = []
            for username, count in streaks:
                partner_id = await db.get_user_id_by_username(username)
                if partner_id:
                    last_chat_dt = await db.get_last_chat_date(user_id, partner_id)
                    today_dt = datetime.now(timezone.utc).date()
                    last_chat_text = "–ù–µ—Ç –æ–±—â–µ–Ω–∏—è"
                    if last_chat_dt:
                        days_diff = (today_dt - last_chat_dt).days
                        last_chat_text = (
                            "–°–µ–≥–æ–¥–Ω—è" if days_diff == 0 and count > 0 else
                            "–í—á–µ—Ä–∞" if days_diff == 1 and count > 0 else
                            last_chat_dt.strftime("%d.%m.%Y") if count > 0 else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç—Ä–∏–∫–∞"
                        )
                    
                    streak_data_for_webapp.append({
                        'username': username,
                        'partner_id': partner_id, 
                        'count': count,
                        'last_chat': last_chat_text
                    })
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ WebApp
            # –≠—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–≤–µ—Ç–∞ –Ω–∞ getData –∑–∞–ø—Ä–æ—Å—ã WebApp
            try:
                await bot.answer_web_app_query(
                    web_app_query_id=message.web_app_data.query_id, 
                    result=types.InlineQueryResultArticle(
                        id=str(user_id) + "_streaks",
                        title="Streaks Data",
                        input_message_content=types.InputTextMessageContent(
                            message_text=json.dumps({"streaks": streak_data_for_webapp, "source": "bot_response"})
                        )
                    )
                )
                logger.info(f"WebApp: Sent streaks data to WebApp for user {user_id} via answer_web_app_query.")
            except Exception as e:
                logger.error(f"WebApp: Error sending data via answer_web_app_query: {e}", exc_info=True)
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ.")

        elif action == 'select_user':
            target_username = data.get('username')
            if target_username:
                # –≠–º—É–ª–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /chat
                command = CommandObject(command='chat', args=f'@{target_username}')
                await cmd_chat(message, command)
                # –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                await send_streaks_data(message.from_user.id, is_webapp_request=True)
            
    except json.JSONDecodeError:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.")

async def handle_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await reset_daily_caches_if_new_day()
    
    user_id = message.from_user.id
    username = message.from_user.username or str(user_id)
    chat_id = message.chat.id
    today = datetime.now(timezone.utc).date()

    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username} ({user_id}) –≤ —á–∞—Ç–µ {chat_id} ({message.chat.type})")

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ —Å–ª—É–∂–µ–±–Ω—ã–µ –≤ –≥—Ä—É–ø–ø–∞—Ö
    if not message.from_user or message.from_user.is_bot:
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –∏–ª–∏ –Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.")
        return

    if message.chat.type != ChatType.PRIVATE and (
        message.new_chat_members or 
        message.left_chat_member or
        message.new_chat_title or
        message.new_chat_photo or
        message.delete_chat_photo or
        message.group_chat_created or
        message.supergroup_chat_created or
        message.channel_chat_created or
        message.message_auto_delete_timer_changed or
        message.pinned_message
    ):
        logger.info("–°–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.add_user(user_id, username)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({user_id}) –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ.")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö
    if message.chat.type not in [ChatType.GROUP, ChatType.SUPERGROUP]:
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç—Ä–∏–∫–æ–≤.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ
    group_activity_today[chat_id].add(user_id)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({user_id}) –æ—Ç–º–µ—á–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–º –≤ —á–∞—Ç–µ {chat_id}. –ê–∫—Ç–∏–≤–Ω—ã–µ: {group_activity_today[chat_id]}")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ —Å–µ–≥–æ–¥–Ω—è
    active_users_in_chat = list(group_activity_today[chat_id])
    
    if len(active_users_in_chat) < 2:
        logger.info("–ú–µ–Ω–µ–µ –¥–≤—É—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ, —Å—Ç—Ä–∏–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã.")
        return

    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä –¥–ª—è —á–∞—Ç–∞ {chat_id}. –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {active_users_in_chat}")

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for i in range(len(active_users_in_chat)):
        for j in range(i + 1, len(active_users_in_chat)):
            user1_id = active_users_in_chat[i]
            user2_id = active_users_in_chat[j]

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º ID, —á—Ç–æ–±—ã –∫–ª—é—á –¥–ª—è notified_streaks_today –±—ã–ª –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–º
            pair_key = tuple(sorted((user1_id, user2_id)))

            logger.info(f"Processing pair: {pair_key} in chat {chat_id}")

            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∞—Ä–∞ –¥–ª—è —Å—Ç—Ä–∏–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –µ—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º
            await db.add_streak_pair(user1_id, user2_id) # –°–æ–∑–¥–∞—Å—Ç —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—É—é –ø–∞—Ä—É, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
            logger.info(f"Ensured streak_pair exists for {pair_key}")
            
            streak_before = await db.get_streak_count(user1_id, user2_id) # –°—Ç—Ä–∏–∫ —Å–∏–º–º–µ—Ç—Ä–∏—á–µ–Ω
            logger.info(f"Streak BEFORE for {pair_key}: {streak_before}")

            # –í—ã–∑—ã–≤–∞–µ–º mark_message –¥–ª—è –ö–ê–ñ–î–û–ì–û –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–∞—Ä—ã.
            # –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ª–æ–≥–∏–∫–∞ mark_message –æ–±–Ω–æ–≤–∏—Ç —Å—Ç—Ä–∏–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –û–ë–ê –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã —Å–µ–≥–æ–¥–Ω—è.
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å (message.from_user.id) —Ä–∞–≤–µ–Ω user1_id, —Ç–æ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–æ.
            # –ï—Å–ª–∏ –æ–Ω —Ä–∞–≤–µ–Ω user2_id, —Ç–æ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–∂–µ.
            # –ù–∞–º –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã mark_message –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –æ–±–µ–∏—Ö "–ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤" –ø–∞—Ä—ã.
            
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –æ—Ç user1_id, —Ç–æ –µ–≥–æ mark_message –≤—ã–∑–æ–≤–µ—Ç—Å—è —Å (user1_id, user2_id, today)
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –æ—Ç user2_id, —Ç–æ –µ–≥–æ mark_message –≤—ã–∑–æ–≤–µ—Ç—Å—è —Å (user2_id, user1_id, today)
            # –ù–æ –Ω–∞–º –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–∞—Ä—É (user1_id, user2_id) —Ü–µ–ª–∏–∫–æ–º.
            
            # –õ–æ–≥–∏–∫–∞ —Ç–∞–∫–∞—è: mark_message(A,B) –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ A->B 
            # –∏ –µ—Å–ª–∏ –µ—Å—Ç—å B->A, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç—Ä–∏–∫ –¥–ª—è A-B.
            await db.mark_message(user1_id, user2_id, today, chat_id) # –ü–µ—Ä–µ–¥–∞–µ–º chat_id –∫–∞–∫ chat_id_context
            await db.mark_message(user2_id, user1_id, today, chat_id) # –ü–µ—Ä–µ–¥–∞–µ–º chat_id –∫–∞–∫ chat_id_context
            
            # –ü–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ mark_message –¥–ª—è –æ–±–µ–∏—Ö "–ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤", —Å—Ç—Ä–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç—É–∞–ª–µ–Ω.
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –æ–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å —Å–µ–≥–æ–¥–Ω—è –í –≠–¢–û–ú –ß–ê–¢–ï
            if await db.check_both_marked(user1_id, user2_id, today, chat_id): # –ü–µ—Ä–µ–¥–∞–µ–º chat_id –∫–∞–∫ chat_id_context
                logger.info(f"Pair {pair_key} confirmed as both marked today in chat {chat_id}.")
                streak_after = await db.get_streak_count(user1_id, user2_id)
                logger.info(f"Streak AFTER for {pair_key}: {streak_after}")

                if streak_after > streak_before and pair_key not in notified_streaks_today[chat_id]:
                    logger.info(f"Streak for {pair_key} increased ({streak_before} -> {streak_after}). Sending notification.")
                    
                    user1_username = await db.get_username_by_id(user1_id) or str(user1_id)
                    user2_username = await db.get_username_by_id(user2_id) or str(user2_id)
                    
                    user1_mention = f"@{user1_username}" if not user1_username.startswith('@') else user1_username
                    user2_mention = f"@{user2_username}" if not user2_username.startswith('@') else user2_username

                    days_word = get_days_word(streak_after)
                    
                    message_text = f"üéØ {user1_mention} –∏ {user2_mention} –Ω–∞—á–∞–ª–∏ –Ω–æ–≤—É—é —Å–µ—Ä–∏—é –æ–±—â–µ–Ω–∏—è!"
                    if streak_before > 0 : # –ï—Å–ª–∏ —Å—Ç—Ä–∏–∫ —É–∂–µ –±—ã–ª, –∑–Ω–∞—á–∏—Ç –æ–Ω –ø—Ä–æ–¥–ª–µ–Ω
                        streak_emoji = "üî•" if streak_after >= 7 else "‚ú®" if streak_after >= 3 else "‚≠êÔ∏è"
                        message_text = f"{streak_emoji} {user1_mention} –∏ {user2_mention} –ø—Ä–æ–¥–ª–∏–ª–∏ —Å—Ç—Ä–∏–∫!\n–í–∞—à–∞ —Å–µ—Ä–∏—è: {streak_after} {days_word} –ø–æ–¥—Ä—è–¥"

                    await message.answer(message_text)
                    notified_streaks_today[chat_id].add(pair_key)
                    logger.info(f"Notification sent for {pair_key}. Added to notified_streaks_today.")

                    if streak_after in [3, 7, 14, 30, 50, 100]:
                        achievement_emoji = "üèÜ" if streak_after >= 30 else "üéâ"
                        await message.answer(
                            f"{achievement_emoji} –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! {streak_after} {days_word} –æ–±—â–µ–Ω–∏—è - —ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!"
                        )
                elif pair_key in notified_streaks_today[chat_id]:
                     logger.info(f"Notification for {pair_key} already sent today.")
                elif streak_after <= streak_before:
                    logger.info(f"Streak for {pair_key} did not increase ({streak_before} -> {streak_after}). No notification needed.")
            else:
                logger.info(f"Pair {pair_key} NOT confirmed as both marked today. No streak update or notification based on this message.")


async def cmd_reset(message: Message, command: CommandObject):
    """–°–±—Ä–æ—Å —Å—Ç—Ä–∏–∫–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    await reset_daily_caches_if_new_day()
    if not command.args:
        await message.answer(
            "‚ÑπÔ∏è <b>–ö–∞–∫ —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç—Ä–∏–∫:</b>\n"
            "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reset @username\n"
            "2. –°—Ç—Ä–∏–∫ –∏ –∏—Å—Ç–æ—Ä–∏—è –æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã\n"
            "3. –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç—Ä–∏–∫",
            parse_mode="HTML"
        )
        return

    user_id = message.from_user.id
    target_username = command.args.strip('@')
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_id = await db.get_user_id_by_username(target_username)
    if not target_id:
        await message.answer(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫ –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º
    current_streak = await db.get_streak_count(user_id, target_id)
    if current_streak == 0:
        await message.answer(
            f"‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç—Ä–∏–∫–∞ —Å @{target_username}."
        )
        return
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∏–∫
    if await db.reset_streak(user_id, target_id):
        days_word = get_days_word(current_streak)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ —Å–±—Ä–æ—Å–∞
        await message.answer(
            f"üîÑ <b>–°—Ç—Ä–∏–∫ —Å–±—Ä–æ—à–µ–Ω</b>\n\n"
            f"‚Ä¢ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫: @{target_username}\n"
            f"‚Ä¢ –°–µ—Ä–∏—è –æ–±—â–µ–Ω–∏—è –±—ã–ª–∞: {current_streak} {days_word}\n"
            f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞\n\n"
            "–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç—Ä–∏–∫!",
            parse_mode="HTML"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await bot.send_message(
                target_id,
                f"‚ùóÔ∏è <b>@{message.from_user.username} —Å–±—Ä–æ—Å–∏–ª —Å—Ç—Ä–∏–∫ –æ–±—â–µ–Ω–∏—è —Å –≤–∞–º–∏</b>\n\n"
                f"‚Ä¢ –í–∞—à–∞ —Å–µ—Ä–∏—è –±—ã–ª–∞: {current_streak} {days_word}\n"
                f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞\n\n"
                "–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç—Ä–∏–∫!",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–±—Ä–æ—Å–µ —Å—Ç—Ä–∏–∫–∞: {e}", exc_info=True)
    else:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—Ç—Ä–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def cmd_help(message: Message, command: Optional[CommandObject] = None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"""
    await reset_daily_caches_if_new_day()
    if message.chat.type == ChatType.PRIVATE:
        await message.answer(
            "üåü <b>Streak Buddy - –í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –æ–±—â–µ–Ω–∏–∏</b>\n\n"
            "ü§ù <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/chat @username - –ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ–±—â–µ–Ω–∏–µ\n"
            "/streaks - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ —Å–µ—Ä–∏–∏ –æ–±—â–µ–Ω–∏—è\n"
            "/reset @username - –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç—Ä–∏–∫ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\n"
            "/webapp - –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n\n"
            "üìä <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ç—Ä–∏–∫–∏:</b>\n"
            "‚Ä¢ –î–µ–Ω—å –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ –æ–±–æ–∏—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤\n"
            "‚Ä¢ –ü—Ä–æ–ø—É—Å–∫ –¥–Ω—è —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–µ—Ä–∏—é\n"
            "‚Ä¢ –ú–æ–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å—Ç—Ä–∏–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –ª—é–¥—å–º–∏\n"
            "‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—á–∏—Ç–∞–µ—Ç –¥–Ω–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö\n\n"
            "üí° <b>–°–æ–≤–µ—Ç—ã:</b>\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
            "‚Ä¢ –û—Ç–º–µ—á–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
            "‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö\n"
            "‚Ä¢ –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏ –≤ –¥–ª–∏–Ω–µ —Å—Ç—Ä–∏–∫–∞\n\n"
            "üéØ <b>–û—Å–æ–±—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö\n"
            "‚Ä¢ –ö—Ä–∞—Å–∏–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ—Ä–¥–∞—Ö\n"
            "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–±—Ä–æ—Å–∞ —Å—Ç—Ä–∏–∫–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏",
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "‚ú® <b>Streak Buddy –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö</b>\n\n"
            "ü§ù <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
            "‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            "‚Ä¢ –°—Ç—Ä–∏–∫ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ –¥–≤—É—Ö –ª—é–¥–µ–π –≤ –æ–¥–∏–Ω –¥–µ–Ω—å\n"
            "‚Ä¢ –°–µ—Ä–∏—è —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –¥–Ω—è\n\n"
            "üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "‚Ä¢ /streaks - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ —Å–µ—Ä–∏–∏ –æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ /reset @username - –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç—Ä–∏–∫ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\n"
            "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "üí´ <b>–°–æ–≤–µ—Ç—ã –¥–ª—è –≥—Ä—É–ø–ø:</b>\n"
            "‚Ä¢ –û–±—â–∞–π—Ç–µ—Å—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å—Ç—Ä–∏–∫–∞\n"
            "‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö\n"
            "‚Ä¢ –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞",
            parse_mode="HTML"
        )

async def cmd_streaks(message: Message, command: Optional[CommandObject] = None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Å–µ—Ä–∏–∏ –æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ù–ï–û–¢–õ–û–ñ–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í–•–û–î–ê –í –§–£–ù–ö–¶–ò–Æ
    logger.critical(f"!!! CMD_STREAKS HANDLER ENTERED by {message.from_user.id} in chat {message.chat.id} !!!") 
    
    await reset_daily_caches_if_new_day()
    user_id = message.from_user.id
    chat_id = message.chat.id
    username = message.from_user.username or str(user_id)
    logger.info(f"CMD: /streaks received from {username} ({user_id}) in chat {chat_id}")

    try:
        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–º –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞
        # await message.answer(f"–¢–µ—Å—Ç /streaks –¥–ª—è {username}! –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ...")
        # logger.info(f"CMD: /streaks - Sent initial test message to {username}")

        await db.add_user(
            user_id=user_id,
            username=username
        )
        logger.info(f"CMD: /streaks - User {username} ({user_id}) ensured in DB.")
        
        streaks = await db.get_user_streaks(user_id, chat_id)
        logger.info(f"CMD: /streaks - Fetched streaks for {username} ({user_id}) in chat {chat_id}: {streaks}")

        if not streaks:
            logger.info(f"CMD: /streaks - No active streaks for {username} ({user_id}) in chat {chat_id}.")
            response_text = "üå± <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–∏–π –æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ</b>\n\n"
            if message.chat.type == ChatType.PRIVATE:
                webapp_button = InlineKeyboardButton(
                    text="üì± –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
                    web_app=WebAppInfo(url=WEBAPP_URL)
                )
                keyboard = InlineKeyboardMarkup(inline_keyboard=[[webapp_button]])
                response_text += (
                    "üí´ <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /chat @username —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ (–≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º)\n"
                    "‚Ä¢ –û–±—â–∞–π—Ç–µ—Å—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å—Ç—Ä–∏–∫–∞\n"
                    "‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ —É–≤–∏–¥–µ—Ç—å –≤—Å–µ —Å–≤–æ–∏ —Å—Ç—Ä–∏–∫–∏:"
                )
                await message.answer(response_text, reply_markup=keyboard, parse_mode="HTML")
            else:
                response_text += (
                     "üí´ <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>\n"
                    "‚Ä¢ –ü—Ä–æ—Å—Ç–æ –æ–±—â–∞–π—Ç–µ—Å—å –≤ –≥—Ä—É–ø–ø–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n"
                    "‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–¥–∏—Ç –≤–∞—à–∏ —Å—Ç—Ä–∏–∫–∏ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ\n"
                    "‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö"
                )
                await message.answer(response_text, parse_mode="HTML")
            return

        response_lines = []
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∏–∫–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        sorted_streaks = sorted(streaks, key=lambda x: x[1], reverse=True)

        for partner_username, streak_count in sorted_streaks:
            days_word = get_days_word(streak_count)
            # partner_mention = f"@{partner_username}" if partner_username and not partner_username.startswith('@') else partner_username
            # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è:
            if partner_username:
                partner_mention = f"@{partner_username}" if not partner_username.startswith('@') else partner_username
            else:
                partner_mention = "(–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä)" # –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ username –ø–æ—á–µ–º—É-—Ç–æ None

            if streak_count > 0:
                fire_emoji = "üî•" if streak_count >= 7 else "‚ú®" if streak_count >= 3 else "‚≠êÔ∏è"
                response_lines.append(f"{fire_emoji} {partner_mention}: {streak_count} {days_word}")
            else:
                response_lines.append(f"üí§ {partner_mention}: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç—Ä–∏–∫–∞") # –≠—Ç–æ—Ç —Å–ª—É—á–∞–π –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–Ω–∏–∫–∞—Ç—å, –µ—Å–ª–∏ get_user_streaks –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ >0
        
        response_text = "üî• <b>–í–∞—à–∏ —Å–µ—Ä–∏–∏ –æ–±—â–µ–Ω–∏—è:</b>\n\n" + "\n".join(response_lines)
        
        if message.chat.type != ChatType.PRIVATE:
            user_mention = f"@{message.from_user.username}" if message.from_user.username else message.from_user.first_name
            response_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_mention}:\n\n" + response_text
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ streaks, –∞ –Ω–µ sorted_streaks, –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if any(s[1] >= 7 for s in streaks):
            response_text += "\n\nüéâ <b>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—â–∞—Ç—å—Å—è!</b>"
        elif any(s[1] >= 3 for s in streaks):
            response_text += "\n\nüí´ <b>–•–æ—Ä–æ—à–∏–π —Å—Ç–∞—Ä—Ç! –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π—Ç–µ –¥–Ω–∏!</b>"
        elif streaks: # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ streaks –Ω–µ –ø—É—Å—Ç–æ–π, –Ω–æ –Ω–µ—Ç —Ç–µ—Ö, –∫—Ç–æ >= 3
            response_text += "\n\nüí™ <b>–ù–∞—á–∞–ª–æ –ø–æ–ª–æ–∂–µ–Ω–æ! –û–±—â–∞–π—Ç–µ—Å—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!</b>"
        # –ï—Å–ª–∏ streaks –ø—É—Å—Ç, —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–∏—Ç—Å—è, —Ç.–∫. –º—ã –≤—ã—à–ª–∏ —Ä–∞–Ω—å—à–µ
        
        logger.info(f"CMD: /streaks - Sending response to {username} ({user_id}):\n{response_text}")
        await message.answer(response_text, parse_mode="HTML")

    except Exception as e:
        logger.error(f"CMD: /streaks - Error processing /streaks for {username} ({user_id}): {e}", exc_info=True)
        await message.answer("üö´ –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤–∞—à–∏—Ö —Å—Ç—Ä–∏–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    global current_bot_date
    current_bot_date = datetime.now(timezone.utc).date()
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è. –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_bot_date}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Dispatcher —Å MemoryStorage (—Ö–æ—Ä–æ—à–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)

    await db.init()
    await setup_bot_commands() # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é Telegram

    # –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –•–ï–ù–î–õ–ï–†–û–í
    # –ö–æ–º–∞–Ω–¥–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ü–ï–†–í–´–ú–ò
    dp.message.register(cmd_start, CommandStart())
    dp.message.register(cmd_webapp, Command("webapp"))
    dp.message.register(cmd_chat, Command("chat"))
    dp.message.register(cmd_reset, Command("reset"))
    dp.message.register(cmd_help, Command("help"))
    dp.message.register(cmd_streaks, Command("streaks")) # <<< –ù–∞—à –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä

    # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp
    dp.message.register(handle_webapp_data, lambda message: message.web_app_data is not None)

    # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–ª–±—ç–∫–æ–≤ (–∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å—Ç—Ä–∏–∫)
    dp.callback_query.register(process_streak_request, lambda c: c.data.startswith(("accept_streak:", "decline_streak:")))

    # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ü–û–°–õ–ï–î–ù–ò–ú
    # –û–Ω –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –Ω–µ –ø–æ–¥–æ—à–µ–ª
    dp.message.register(handle_message) 

    logger.info("–•–µ–Ω–¥–ª–µ—Ä—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä (–µ—Å–ª–∏ –æ–Ω –≤—Å–µ –µ—â–µ –Ω—É–∂–µ–Ω, –µ—Å–ª–∏ –Ω–µ—Ç - –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å)
    app = web.Application()
    app.add_routes(routes)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, 'localhost', 8080)
    await site.start()
    logger.info("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8080")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ polling...")
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()
        logger.info("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞.")

if __name__ == "__main__":
    asyncio.run(main()) 