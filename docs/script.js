// --- –ù–∞—á–∞–ª–æ –∫–æ–¥–∞ –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏/–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è Telegram WebApp --- 
// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ Telegram
const isTelegramEnv = window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe && window.Telegram.WebApp.initDataUnsafe.query_id;

if (!isTelegramEnv) {
    console.warn('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤–Ω–µ Telegram –∏–ª–∏ initDataUnsafe –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –≠–º—É–ª—è—Ü–∏—è/–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ Telegram WebApp API –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏.');
    
    window.Telegram = window.Telegram || {}; // –°–æ–∑–¥–∞–µ–º Telegram, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    window.Telegram.WebApp = window.Telegram.WebApp || {}; // –°–æ–∑–¥–∞–µ–º WebApp, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º/–¥–æ–ø–æ–ª–Ω—è–µ–º initDataUnsafe –∏ –¥—Ä—É–≥–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
    window.Telegram.WebApp.initDataUnsafe = window.Telegram.WebApp.initDataUnsafe || {};
    window.Telegram.WebApp.initDataUnsafe.user = window.Telegram.WebApp.initDataUnsafe.user || {
        id: 668673256, // <<<=== –ü–û–°–¢–ê–í–¨–¢–ï –°–Æ–î–ê –í–ê–® –†–ï–ê–õ–¨–ù–´–ô TELEGRAM ID –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        first_name: 'Debug',
        last_name: 'User',
        username: 'whoami_debug_test', // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à –Ω–∏–∫ –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π
        language_code: 'ru'
    };
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ user.id —Ç–æ—á–Ω–æ –µ—Å—Ç—å
    if (!window.Telegram.WebApp.initDataUnsafe.user.id) {
        window.Telegram.WebApp.initDataUnsafe.user.id = 668673256; // <<<=== –ò –°–Æ–î–ê –í–ê–® –†–ï–ê–õ–¨–ù–´–ô ID
        console.log('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π user.id –≤ —ç–º—É–ª—è—Ü–∏–∏.');
    }

    window.Telegram.WebApp.initData = window.Telegram.WebApp.initData || `query_id=EMULATED_QUERY_ID&user=${JSON.stringify(window.Telegram.WebApp.initDataUnsafe.user)}&auth_date=${Math.floor(Date.now() / 1000)}&hash=emulated_hash`;

    // –î–æ–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    const webAppDefaults = {
        expand: function() { console.log('–≠–º—É–ª—è—Ü–∏—è: WebApp.expand()'); },
        ready: function() { console.log('–≠–º—É–ª—è—Ü–∏—è: WebApp.ready()'); },
        sendData: function(data) { console.log('–≠–º—É–ª—è—Ü–∏—è: WebApp.sendData()', data); },
        close: function() { console.log('–≠–º—É–ª—è—Ü–∏—è: WebApp.close()'); },
        setHeaderColor: function(color_key) { console.log('–≠–º—É–ª—è—Ü–∏—è: WebApp.setHeaderColor()', color_key); },
        setBackgroundColor: function(color_key) { console.log('–≠–º—É–ª—è—Ü–∏—è: WebApp.setBackgroundColor()', color_key); },
        themeParams: {
            bg_color: '#ffffff', text_color: '#000000', hint_color: '#707070',
            link_color: '#007aff', button_color: '#007aff', button_text_color: '#ffffff',
            secondary_bg_color: "#f0f0f0",
        },
        colorScheme: 'light', version: '6.7',
        MainButton: { /* ... (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –±—ã–ª–æ –∏–ª–∏ —É–ø—Ä–æ—Å—Ç–∏—Ç—å) ... */ isVisible: false, show: function(){}, hide: function(){} },
        BackButton: { /* ... */ isVisible: false, show: function(){}, hide: function(){} },
        HapticFeedback: { impactOccurred: function(s){}, notificationOccurred: function(t){}, selectionChanged: function(){} },
        platform: 'tdesktop',
        isClosingConfirmationEnabled: false,
        enableClosingConfirmation: function() { this.isClosingConfirmationEnabled = true; },
        disableClosingConfirmation: function() { this.isClosingConfirmationEnabled = false; },
    };

    for (const key in webAppDefaults) {
        if (typeof window.Telegram.WebApp[key] === 'undefined') {
            window.Telegram.WebApp[key] = webAppDefaults[key];
        }
    }
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ MainButton —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç –±–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    window.Telegram.WebApp.MainButton = window.Telegram.WebApp.MainButton || {isVisible: false, show: function(){}, hide: function(){}};
     // –ò —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –≤–∞–∂–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
}
// --- –ö–æ–Ω–µ—Ü –∫–æ–¥–∞ –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏/–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è Telegram WebApp ---

console.log('script.js: Script loaded. Environment:', isTelegramEnv ? 'Telegram' : 'Browser/Emulated');
const tg = window.Telegram.WebApp;
tg.expand(); // Expand the Web App to full height

const criticalErrorDiv = document.getElementById('error');
const feedbackDiv = document.getElementById('feedback');
const streakListDiv = document.getElementById('streakList');
let currentUserId = null;

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL –¥–ª—è API
const IS_LOCALHOST_DEBUG = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1' || window.location.protocol === 'file:';
const API_BASE_URL = IS_LOCALHOST_DEBUG ? 'http://localhost:8080' : ''; // –ï—Å–ª–∏ –Ω–∞ GitHub Pages, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ —Ç–æ—Ç –∂–µ –¥–æ–º–µ–Ω)
                                                                    // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å –±–æ—Ç–æ–º –Ω–∞ localhost:8080, API_BASE_URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'http://localhost:8080'
                                                                    // –ï—Å–ª–∏ WebApp –Ω–∞ GitHub Pages, –∞ –±–æ—Ç –Ω–∞ localhost, —Ç–æ CORS –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω
                                                                    // –∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'http://localhost:8080'

console.log('script.js: Variables initialized');

function showFeedback(message, isError = false) {
    console.log('script.js: showFeedback called with:', message, 'isError:', isError);
    feedbackDiv.textContent = message;
    feedbackDiv.className = 'feedback-message'; // Reset classes
    if (isError) {
        feedbackDiv.classList.add('feedback-error');
    } else {
        feedbackDiv.classList.add('feedback-success');
    }
    feedbackDiv.style.display = 'block';
    setTimeout(() => {
        feedbackDiv.style.display = 'none';
    }, 5000);
}

function showCriticalError(message) {
    console.error('script.js: showCriticalError called with:', message);
    criticalErrorDiv.textContent = message;
    criticalErrorDiv.style.display = 'block';
    streakListDiv.innerHTML = '';
}

async function fetchStreaks() {
    console.log('script.js: fetchStreaks called. currentUserId:', currentUserId);
    if (!currentUserId) {
        showCriticalError("–û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.");
        return;
    }
    streakListDiv.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∏–∫–æ–≤...</div>';
    criticalErrorDiv.style.display = 'none';

    const apiUrl = API_BASE_URL + '/api/webapp/user_streaks?user_id=' + currentUserId;
    console.log('script.js: Attempting to fetch from:', apiUrl);

    try {
        const response = await fetch(apiUrl);
        console.log('script.js: Fetch response received:', response);
        if (!response.ok) {
            const errorData = await response.json().catch(() => ({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (json parsing failed)" }));
            console.error('script.js: Fetch error - Response not OK. Status:', response.status, 'Error data:', errorData);
            throw new Error(errorData.error || '–û—à–∏–±–∫–∞ ' + response.status + ' –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∏–∫–æ–≤');
        }
        const data = await response.json();
        console.log('script.js: Streaks data from server:', data);
        updateStreaksUI(data.streaks);
    } catch (err) {
        console.error('script.js: Error in fetchStreaks catch block:', err);
        showCriticalError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∏–∫–∏: ' + err.message);
    }
}

function createStreakCardHTML(streak) {
    const safePartnerUsername = streak.partner_username.replace(/'/g, "\\'").replace(/"/g, "&quot;");
    return (
        '<div class="streak-card">' +
            '<div class="streak-info">' +
                '<div class="user-pair">–í—ã –∏ @' + streak.partner_username + '</div>' +
                '<div class="streak-count">' + streak.streak_count + 'üî•</div>' +
            '</div>' +
            '<button onclick="markToday(' + streak.partner_id + ', \'' + safePartnerUsername + '\')">–ü—Ä–æ–¥–ª–∏—Ç—å —Å—Ç—Ä–∏–∫ —Å–µ–≥–æ–¥–Ω—è</button>' +
        '</div>'
    );
}

function updateStreaksUI(streaks) {
    console.log('script.js: updateStreaksUI called with streaks:', streaks);
    if (streaks && streaks.length > 0) {
        streakListDiv.innerHTML = streaks.map(createStreakCardHTML).join('');
    } else {
        streakListDiv.innerHTML = (
            '<div class="empty-state">' +
                '<h2>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç—Ä–∏–∫–æ–≤</h2>' +
                '<p>–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å—Ç—Ä–∏–∫, –Ω–∞—á–Ω–∏—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –∫–µ–º-–Ω–∏–±—É–¥—å –≤ Telegram, –≥–¥–µ –¥–æ–±–∞–≤–ª–µ–Ω –±–æ—Ç, –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /chat –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.</p>' +
            '</div>'
        );
    }
}

async function markToday(partnerId, partnerUsername) {
    console.log('script.js: markToday called for partnerId:', partnerId, 'partnerUsername:', partnerUsername, 'currentUserId:', currentUserId);
    if (!currentUserId) {
        showFeedback("–û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.", true);
        return;
    }
    showFeedback('–û—Ç–º–µ—á–∞–µ–º —Å—Ç—Ä–∏–∫ —Å @' + partnerUsername + '...', false); // Initial feedback

    const apiUrlMark = API_BASE_URL + '/api/webapp/mark_today';
    console.log('script.js: Attempting to POST to:', apiUrlMark, 'with data:', { user_id: currentUserId, partner_id: partnerId });

    try {
        const response = await fetch(apiUrlMark, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ user_id: currentUserId, partner_id: partnerId }),
        });
        console.log('script.js: Mark today response received:', response);
        const result = await response.json();
        console.log('script.js: Mark today result from server:', result);

        if (!response.ok) {
            console.error('script.js: Mark today error - Response not OK. Status:', response.status, 'Result data:', result);
            throw new Error(result.error || '–û—à–∏–±–∫–∞ ' + response.status + ' –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        }
        
        showFeedback(result.message || "–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.", !result.streak_updated && !result.message.toLowerCase().includes("—É–∂–µ") && !result.message.toLowerCase().includes("—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"));

        const positiveMessages = ["—Å—Ç—Ä–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω", "—É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ", "—É–∂–µ –±—ã–ª–æ —É—á—Ç–µ–Ω–æ", "–≤–∞—à–∞ –æ—Ç–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"];
        if (result.streak_updated || positiveMessages.some(pm => result.message.toLowerCase().includes(pm))) {
            setTimeout(fetchStreaks, 1000);
        }

    } catch (err) {
        console.error('script.js: Error in markToday catch block:', err);
         showFeedback('–û—à–∏–±–∫–∞ —Å @' + partnerUsername + ': ' + err.message, true);
    }
}

console.log('script.js: Functions defined. Initializing Web App...');
// Initialize the Web App
if (tg.initDataUnsafe && tg.initDataUnsafe.user && tg.initDataUnsafe.user.id) {
    currentUserId = tg.initDataUnsafe.user.id;
    console.log('script.js: Telegram user data found. currentUserId:', currentUserId, 'Calling fetchStreaks().');
    fetchStreaks();
} else {
    console.error('script.js: Telegram user data NOT found or incomplete. tg.initDataUnsafe:', tg.initDataUnsafe);
    showCriticalError("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞.");
}

console.log('script.js: Script execution finished.');

// Optional: Set theme parameters based on Telegram theme
// tg.setHeaderColor('secondary_bg_color'); // Example
// tg.setBackgroundColor('bg_color'); // Example 