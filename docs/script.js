console.log('script.js: Script loaded');
const tg = window.Telegram.WebApp;
tg.expand(); // Expand the Web App to full height

const criticalErrorDiv = document.getElementById('error');
const feedbackDiv = document.getElementById('feedback');
const streakListDiv = document.getElementById('streakList');
let currentUserId = null;

console.log('script.js: Variables initialized');

function showFeedback(message, isError = false) {
    console.log('script.js: showFeedback called with:', message, 'isError:', isError);
    feedbackDiv.textContent = message;
    feedbackDiv.className = 'feedback-message'; // Reset classes
    if (isError) {
        feedbackDiv.classList.add('feedback-error');
    } else {
        feedbackDiv.classList.add('feedback-success');
    }
    feedbackDiv.style.display = 'block';
    setTimeout(() => {
        feedbackDiv.style.display = 'none';
    }, 5000);
}

function showCriticalError(message) {
    console.error('script.js: showCriticalError called with:', message);
    criticalErrorDiv.textContent = message;
    criticalErrorDiv.style.display = 'block';
    streakListDiv.innerHTML = '';
}

async function fetchStreaks() {
    console.log('script.js: fetchStreaks called. currentUserId:', currentUserId);
    if (!currentUserId) {
        showCriticalError("–û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.");
        return;
    }
    streakListDiv.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∏–∫–æ–≤...</div>';
    criticalErrorDiv.style.display = 'none';

    const apiUrl = '/api/webapp/user_streaks?user_id=' + currentUserId;
    console.log('script.js: Attempting to fetch from:', apiUrl);

    try {
        const response = await fetch(apiUrl);
        console.log('script.js: Fetch response received:', response);
        if (!response.ok) {
            const errorData = await response.json().catch(() => ({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (json parsing failed)" }));
            console.error('script.js: Fetch error - Response not OK. Status:', response.status, 'Error data:', errorData);
            throw new Error(errorData.error || '–û—à–∏–±–∫–∞ ' + response.status + ' –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∏–∫–æ–≤');
        }
        const data = await response.json();
        console.log('script.js: Streaks data from server:', data);
        updateStreaksUI(data.streaks);
    } catch (err) {
        console.error('script.js: Error in fetchStreaks catch block:', err);
        showCriticalError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∏–∫–∏: ' + err.message);
    }
}

function createStreakCardHTML(streak) {
    const safePartnerUsername = streak.partner_username.replace(/'/g, "\\'").replace(/"/g, "&quot;");
    return (
        '<div class="streak-card">' +
            '<div class="streak-info">' +
                '<div class="user-pair">–í—ã –∏ @' + streak.partner_username + '</div>' +
                '<div class="streak-count">' + streak.streak_count + 'üî•</div>' +
            '</div>' +
            '<button onclick="markToday(' + streak.partner_id + ', \'' + safePartnerUsername + '\')">–ü—Ä–æ–¥–ª–∏—Ç—å —Å—Ç—Ä–∏–∫ —Å–µ–≥–æ–¥–Ω—è</button>' +
        '</div>'
    );
}

function updateStreaksUI(streaks) {
    console.log('script.js: updateStreaksUI called with streaks:', streaks);
    if (streaks && streaks.length > 0) {
        streakListDiv.innerHTML = streaks.map(createStreakCardHTML).join('');
    } else {
        streakListDiv.innerHTML = (
            '<div class="empty-state">' +
                '<h2>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç—Ä–∏–∫–æ–≤</h2>' +
                '<p>–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å—Ç—Ä–∏–∫, –Ω–∞—á–Ω–∏—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –∫–µ–º-–Ω–∏–±—É–¥—å –≤ Telegram, –≥–¥–µ –¥–æ–±–∞–≤–ª–µ–Ω –±–æ—Ç, –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /chat –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.</p>' +
            '</div>'
        );
    }
}

async function markToday(partnerId, partnerUsername) {
    console.log('script.js: markToday called for partnerId:', partnerId, 'partnerUsername:', partnerUsername, 'currentUserId:', currentUserId);
    if (!currentUserId) {
        showFeedback("–û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.", true);
        return;
    }
    showFeedback('–û—Ç–º–µ—á–∞–µ–º —Å—Ç—Ä–∏–∫ —Å @' + partnerUsername + '...', false); // Initial feedback

    const apiUrlMark = '/api/webapp/mark_today';
    console.log('script.js: Attempting to POST to:', apiUrlMark, 'with data:', { user_id: currentUserId, partner_id: partnerId });

    try {
        const response = await fetch(apiUrlMark, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ user_id: currentUserId, partner_id: partnerId }),
        });
        console.log('script.js: Mark today response received:', response);
        const result = await response.json();
        console.log('script.js: Mark today result from server:', result);

        if (!response.ok) {
            console.error('script.js: Mark today error - Response not OK. Status:', response.status, 'Result data:', result);
            throw new Error(result.error || '–û—à–∏–±–∫–∞ ' + response.status + ' –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        }
        
        showFeedback(result.message || "–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.", !result.streak_updated && !result.message.toLowerCase().includes("—É–∂–µ") && !result.message.toLowerCase().includes("—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"));

        const positiveMessages = ["—Å—Ç—Ä–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω", "—É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ", "—É–∂–µ –±—ã–ª–æ —É—á—Ç–µ–Ω–æ", "–≤–∞—à–∞ –æ—Ç–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"];
        if (result.streak_updated || positiveMessages.some(pm => result.message.toLowerCase().includes(pm))) {
            setTimeout(fetchStreaks, 1000);
        }

    } catch (err) {
        console.error('script.js: Error in markToday catch block:', err);
         showFeedback('–û—à–∏–±–∫–∞ —Å @' + partnerUsername + ': ' + err.message, true);
    }
}

console.log('script.js: Functions defined. Initializing Web App...');
// Initialize the Web App
if (tg.initDataUnsafe && tg.initDataUnsafe.user && tg.initDataUnsafe.user.id) {
    currentUserId = tg.initDataUnsafe.user.id;
    console.log('script.js: Telegram user data found. currentUserId:', currentUserId, 'Calling fetchStreaks().');
    fetchStreaks();
} else {
    console.error('script.js: Telegram user data NOT found or incomplete. tg.initDataUnsafe:', tg.initDataUnsafe);
    showCriticalError("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞.");
}

console.log('script.js: Script execution finished.');

// Optional: Set theme parameters based on Telegram theme
// tg.setHeaderColor('secondary_bg_color'); // Example
// tg.setBackgroundColor('bg_color'); // Example 